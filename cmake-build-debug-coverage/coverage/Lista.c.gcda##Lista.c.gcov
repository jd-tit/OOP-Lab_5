        -:    0:Source:C:/Projects/fac/OOP/CheltuieliFamilie/Lista.c
        -:    0:Graph:C:\Projects\fac\OOP\CheltuieliFamilie\cmake-build-debug-coverage\CMakeFiles\CheltuieliFamilie.dir\Lista.c.gcno
        -:    0:Data:C:\Projects\fac\OOP\CheltuieliFamilie\cmake-build-debug-coverage\CMakeFiles\CheltuieliFamilie.dir\Lista.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include "Lista.h"
        -:    4:#include <stdbool.h>
        -:    5:
function initList called 31 returned 100% blocks executed 100%
       31:    6:void initList(Lista* l, size_t elem_size, destructor element_destructor, copy_function copy)
        -:    7:{
       31:    8:    l->element_size = elem_size;
       31:    9:	l->elements = malloc(elem_size * INIT_MAX_SIZE);
       31:   10:	l->lungime = 0;
       31:   11:	l->capacitate = INIT_MAX_SIZE;
       31:   12:    l->destroy_element = element_destructor;
       31:   13:    l->copy = copy;
       31:   14:}
        -:   15:
function get_element called 99 returned 100% blocks executed 100%
       99:   16:void* get_element(Lista* l, size_t index)
        -:   17:{
       99:   18:    char** res = l->elements + index * l->element_size;
       99:   19:	return *res;
       99:   19-block  0
        -:   20:}
        -:   21:
function get_pointer_to_position called 9 returned 100% blocks executed 100%
        9:   22:void** get_pointer_to_position(Lista* l, size_t index){
        9:   23:    void** res = l->elements + index * l->element_size;
        9:   24:    return res;
        9:   24-block  0
        -:   25:}
        -:   26:
function getLungime called 17 returned 100% blocks executed 100%
       17:   27:size_t getLungime(Lista* l)
        -:   28:{
       17:   29:	return l->lungime;
       17:   29-block  0
        -:   30:}
        -:   31:
function increase_size called 11 returned 100% blocks executed 75%
       11:   32:int increase_size(Lista* l){
        -:   33:
       11:   34:    void* aux = realloc(l->elements ,l->capacitate * l->element_size * RESIZE_FACTOR);
       11:   35:    if(aux == NULL){
       11:   35-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    #####:   36:        return ALLOC_ERROR;
    %%%%%:   36-block  0
        -:   37:    }
       11:   38:    l->capacitate *= RESIZE_FACTOR;
       11:   39:    l->elements = aux;
       11:   40:    return EXIT_SUCCESS;
       11:   40-block  0
        -:   41:}
        -:   42:
function copyLista called 4 returned 100% blocks executed 100%
        4:   43:Lista* copyLista(Lista* original){
        4:   44:    Lista* copy = malloc(sizeof(Lista));
        4:   45:    initList(copy, original->element_size, original->destroy_element, original->copy);
        4:   45-block  0
call    0 returned 4
       12:   46:    for(size_t i = 0; i < original->lungime; ++i){
       12:   46-block  0
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        8:   47:        void* elem = original->copy(get_element(original, i));
        8:   47-block  0
call    0 returned 8
call    1 returned 8
        8:   48:        push_back(copy, elem);
call    0 returned 8
        -:   49:    }
        4:   50:    return copy;
        4:   50-block  0
        -:   51:}
        -:   52:
function push_back called 32 returned 100% blocks executed 100%
       32:   53:void push_back(Lista* l, void* elem)
        -:   54:{
       32:   55:    if(l->lungime >= l->capacitate -1){
       32:   55-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 21
       11:   56:        increase_size(l);
       11:   56-block  0
call    0 returned 11
        -:   57:    }
       32:   58:    char* dest = l->elements + l->lungime * l->element_size;
       32:   59:    memcpy(dest, &elem, l->element_size);
       32:   60:	l->lungime++;
       32:   61:}
        -:   62:
function inlocuireInLista called 1 returned 100% blocks executed 100%
        1:   63:void inlocuireInLista(Lista* l, void* elem, size_t index)
        -:   64:{
        1:   65:    l->destroy_element(get_element(l, index));
        1:   65-block  0
call    0 returned 1
call    1 returned 1
        1:   66:    void** dest = get_pointer_to_position(l, index);
call    0 returned 1
        1:   67:    memcpy(dest, &elem, l->element_size);
        1:   68:}
        -:   69:
function eliminareDinLista called 0 returned 0% blocks executed 0%
    #####:   70:Cheltuiala eliminareDinLista(Lista *l, size_t index)
        -:   71:{
    #####:   72:	void* last = get_element(l, l->lungime);
    %%%%%:   72-block  0
call    0 never executed
    #####:   73:    void* target = get_element(l, index);
call    0 never executed
    #####:   74:    l->destroy_element(target);
call    0 never executed
    #####:   75:    memcpy(&target, &last, l->element_size);
    #####:   76:	l->lungime--;
    #####:   77:}
        -:   78:
function existaPozitie called 2 returned 100% blocks executed 100%
        2:   79:bool existaPozitie(int numar, Lista* l)
        -:   80:{
        2:   81:	if (numar > l->lungime-1 || numar < 0)
        2:   81-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   81-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        1:   82:		return false;
        1:   82-block  0
        1:   83:	return true;
        1:   83-block  0
        -:   84:}
        -:   85:
function distrugereLista called 30 returned 100% blocks executed 100%
       30:   86:void distrugereLista(Lista *l)
        -:   87:{
       62:   88:	for (int i = 0; i < l->lungime; i++)
       30:   88-block  0
       62:   88-block  1
branch  0 taken 32
branch  1 taken 30 (fallthrough)
        -:   89:	{
       32:   90:		char* elem = get_element(l, i);
       32:   90-block  0
call    0 returned 32
       32:   91:        l->destroy_element(elem);
call    0 returned 32
        -:   92:	}
       30:   93:	l->lungime = 0;
       30:   94:	free(l->elements);
       30:   95:    l->elements = NULL;
       30:   96:    free(l);
       30:   97:    l = NULL;
       30:   98:}
        -:   99:
function filt_zi called 6 returned 100% blocks executed 100%
        6:  100:Lista * filt_zi(int mod, int zi, Lista* l)
        -:  101:{
        6:  102:    Lista* filtrare = malloc(sizeof(Lista));
        6:  103:    initList(filtrare, sizeof(Cheltuiala), distrugereCheltuiala, (copy_function) copiereCheltuiala);
        6:  103-block  0
call    0 returned 6
        6:  104:	if (mod == '1')
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -:  105:	{
        6:  106:		for (int i = 0; i < l->lungime; i++)
        2:  106-block  0
        4:  106-block  1
        6:  106-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  107:		{
        4:  108:			Cheltuiala* c = (Cheltuiala*) get_element(l, i);
        4:  108-block  0
call    0 returned 4
        4:  109:			if (c->zi <= zi) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  110:                Cheltuiala* new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  110-block  0
call    0 returned 1
        1:  111:                push_back(filtrare, new_c);
call    0 returned 1
        -:  112:            }
        -:  113:		}
        -:  114:	}
        6:  115:	if (mod == '2')
        6:  115-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -:  116:	{
        6:  117:		for (int i = 0; i < l->lungime; i++)
        2:  117-block  0
        4:  117-block  1
        6:  117-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  118:		{
        4:  119:            Cheltuiala* c = (Cheltuiala*) get_element(l, i);
        4:  119-block  0
call    0 returned 4
        4:  120:            if (c->zi == zi) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  121:                Cheltuiala* new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  121-block  0
call    0 returned 1
        1:  122:                push_back(filtrare, new_c);
call    0 returned 1
        -:  123:            }
        -:  124:		}
        -:  125:	}
        6:  126:	if (mod == '3')
        6:  126-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -:  127:	{
        6:  128:		for (int i = 0; i < l->lungime; i++)
        2:  128-block  0
        4:  128-block  1
        6:  128-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  129:		{
        4:  130:            Cheltuiala* c = (Cheltuiala*) get_element(l, i);
        4:  130-block  0
call    0 returned 4
        4:  131:            if (c->zi > zi) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  132:                Cheltuiala* new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  132-block  0
call    0 returned 1
        1:  133:                push_back(filtrare, new_c);
call    0 returned 1
        -:  134:            }
        -:  135:		}
        -:  136:	}
        6:  137:	return filtrare;
        6:  137-block  0
        -:  138:}
        -:  139:
function filt_suma called 6 returned 100% blocks executed 100%
        6:  140:Lista * filt_suma(char mod, int suma, Lista* l)
        -:  141:{
        6:  142:    Lista* filtrare = malloc(sizeof(Lista));
        6:  143:    initList(filtrare, sizeof(Cheltuiala), distrugereCheltuiala, (copy_function) copiereCheltuiala);
        6:  143-block  0
call    0 returned 6
        6:  144:	if (mod == '1')
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -:  145:	{
        6:  146:		for (int i = 0; i < l->lungime; i++)
        2:  146-block  0
        4:  146-block  1
        6:  146-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  147:		{
        4:  148:			Cheltuiala* c = get_element(l, i);
        4:  148-block  0
call    0 returned 4
        4:  149:			if (c->suma < suma) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  150:                Cheltuiala* new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  150-block  0
call    0 returned 1
        1:  151:                push_back(filtrare, new_c);
call    0 returned 1
        -:  152:            }
        -:  153:		}
        2:  154:		return filtrare;
        2:  154-block  0
        4:  155:	} else if (mod == '2')
        4:  155-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  156:	{
        6:  157:        for (int i = 0; i < l->lungime; i++)
        2:  157-block  0
        4:  157-block  1
        6:  157-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  158:        {
        4:  159:            Cheltuiala* c = get_element(l, i);
        4:  159-block  0
call    0 returned 4
        4:  160:            if (c->suma == suma) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  161:                Cheltuiala* new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  161-block  0
call    0 returned 1
        1:  162:                push_back(filtrare, new_c);
call    0 returned 1
        -:  163:            }
        -:  164:        }
        2:  165:		return filtrare;
        2:  165-block  0
        2:  166:	} else if (mod == '3') {
        2:  166-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        6:  167:        for (int i = 0; i < l->lungime; i++)
        2:  167-block  0
        4:  167-block  1
        6:  167-block  2
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  168:        {
        4:  169:            Cheltuiala* c = get_element(l, i);
        4:  169-block  0
call    0 returned 4
        4:  170:            if (c->suma > suma) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  171:                Cheltuiala *new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  171-block  0
call    0 returned 1
        1:  172:                push_back(filtrare, new_c);
call    0 returned 1
        -:  173:            }
        -:  174:        }
        -:  175:    }
        2:  176:    return filtrare;
        2:  176-block  0
        -:  177:}
        -:  178:
function filt_tip called 3 returned 100% blocks executed 100%
        3:  179:Lista * filt_tip(char mod, char tip[], Lista* l)
        -:  180:{
        3:  181:    Lista* filtrare = malloc(sizeof(Lista));
        3:  182:    initList(filtrare, sizeof(Cheltuiala), distrugereCheltuiala, (copy_function) copiereCheltuiala);
        3:  182-block  0
call    0 returned 3
        3:  183:	if (mod == '1')
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -:  184:	{
        6:  185:		for (int i = 0; i < l->lungime; i++)
        2:  185-block  0
        4:  185-block  1
        6:  185-block  2
branch  0 taken 4
branch  1 taken 2
        -:  186:		{
        4:  187:			Cheltuiala* c = get_element(l, i);
        4:  187-block  0
call    0 returned 4
        4:  188:			if (strcmp(c->tip, tip) == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  189:                Cheltuiala *new_c = formareCheltuiala(c->zi, c->suma, c->tip);
        1:  189-block  0
call    0 returned 1
        1:  190:                push_back(filtrare, new_c);
call    0 returned 1
        -:  191:            }
        -:  192:		}
        -:  193:	}
        -:  194:	else
        -:  195:	{
        3:  196:		for (int i = 0; i < l->lungime; i++)
        1:  196-block  0
        2:  196-block  1
        3:  196-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  197:		{
        2:  198:			Cheltuiala* c = get_element(l, i);
        2:  198-block  0
call    0 returned 2
        2:  199:			if (strcmp(c->tip, tip) != 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  200:                push_back(filtrare, formareCheltuiala(c->zi, c->suma, c->tip));
        2:  200-block  0
call    0 returned 2
call    1 returned 2
        -:  201:		}
        -:  202:	}
        3:  203:	return filtrare;
        3:  203-block  0
        -:  204:}
        -:  205:
function compSuma called 5 returned 100% blocks executed 100%
        5:  206:int compSuma(Cheltuiala* c1, Cheltuiala* c2, int ordine)
        -:  207:{
        5:  208:	if (c1->suma == c2->suma)
        5:  208-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  209:		return 0;
        1:  209-block  0
        4:  210:	if (c1->suma > c2->suma)
        4:  210-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  211:		return 1*ordine;
        1:  211-block  0
        3:  212:	return (-1)*ordine;
        3:  212-block  0
        -:  213:}
        -:  214:
function compTip called 5 returned 100% blocks executed 100%
        5:  215:int compTip(Cheltuiala* c1, Cheltuiala* c2, int ordine)
        -:  216:{
        5:  217:	if (strcmp(c1->tip, c2->tip) == 0)
        5:  217-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  218:		return 0;
        1:  218-block  0
        4:  219:	if (strcmp(c1->tip, c2->tip) > 0)
        4:  219-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  220:		return 1 * ordine;
        3:  220-block  0
        1:  221:	return (-1) * ordine;
        1:  221-block  0
        -:  222:}
        -:  223:
function sortareLista called 4 returned 100% blocks executed 100%
        4:  224:Lista* sortareLista(Lista* l, functieComparare cmp_function, int ordine)
        -:  225:{
        -:  226:    Lista* sorted;
        4:  227:    sorted = copyLista(l);
        4:  227-block  0
call    0 returned 4
        -:  228:    void* aux;
        -:  229:
        8:  230:    for (int i = 0; i < sorted->lungime - 1; i++)
        4:  230-block  0
        8:  230-block  1
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        8:  231:        for (int j = i + 1; j < sorted->lungime; j++)
        4:  231-block  0
        4:  231-block  1
        8:  231-block  2
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        4:  232:            if (cmp_function(get_element(sorted, i), get_element(sorted, j), ordine) == 1)
        4:  232-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        -:  233:            {
        2:  234:                memcpy(&aux, get_pointer_to_position(sorted, i), sorted->element_size);
        2:  234-block  0
call    0 returned 2
        2:  235:                memcpy(get_pointer_to_position(sorted, i), get_pointer_to_position(sorted, j), sorted->element_size);
call    0 returned 2
call    1 returned 2
        2:  236:                memcpy(get_pointer_to_position(sorted, j), &aux, sorted->element_size);
call    0 returned 2
        -:  237:            }
        4:  238:    return sorted;
        4:  238-block  0
        -:  239:}
